/// Extracts an item, previously defined via [**export**](#mixin-export) mixin, and allows the use of [**get**](#function-get) and [**get-value**](#function-get-value) functions without the need of specified group. This mixin is internally used by [**import**](#mixin-import) mixin. Unlike the [**import**](#mixin-import), this mixin doen't automatically adds generated selector.
/// @group export
/// @access public
/// @param {string} $name - Name
/// @param {string} $group [$export-group] - Group key
/// @example @include props(component-name) { ... }

@mixin props($name, $group: if(global-variable-exists(export-group), $export-group, $system-default-group)) {

  // Set global export group name based on provided group. This is needed in
  // case when $export-group variable is not used and falls back to default
  // value.

  $export-group: $group !global;

  // Adds exported group properties to system variable, where all currently
  // exported properties are placed in. This is needed for import nesting to
  // work properly.

  $system-data: map-merge($system-data, (
    '#{compute-key($name, $group)}': import($name, $group),
  )) !global;

  // Extract last item from currently active list of modules.
  $system-import: nth(nth($system-data, length($system-data)), 2) !global;

  // content
  @content;

  // Remove last item in currently active list of export group modules. Only the
  // last item is removed, so next to last item can be activated later. This is
  // needed for proper nesting functionality.

  $system-data: map-remove($system-data, '#{compute-key($name, $group)}') !global;

  // Extract last item from currently active list of modules.
  $system-import: if(length($system-data) > 0, nth(nth($system-data, length($system-data)), 2), ()) !global;

}
