/// Adds grid layout to a **$container** element. Includes legacy support, however the layout may not be identical to modern W3C standard. Note, if placed inside [**import**](#mixin-import) mixin, the `@at-root` directive with `get(selector)` should be used.
/// @group tools
/// @access public
/// @param {string} $container - Class used for grid container.
/// @param {string} $item - Class name for children.
/// @param {number} $width - Column width, in pixels.
/// @param {number} $whitespace - Space between columns, in pixels.
/// @param {number} $trim-viewport-by [0] - Reduce available width considered into legacy calculation.

@mixin grid($container, $item, $width, $whitespace, $trim-viewport-by: 0) {

  #{class($container)} {
    display: grid;
    margin: -#{rem($whitespace / 2)};
  }

  // legacy
  // include legacy support only if $const-grid-enable-legacy is true
  // may generate large amount of code

  @if($const-grid-enable-legacy-mode == true) {

    // layout (legacy)
    // these browsers don't support modern W3C standard
    // number of columns must be therefore specified

    #{class($container)} {

      // grid
      @include grid-container($width, $whitespace, $trim-viewport-by);

      // children
      // each grid items has specific position in the grid
      // appropriate number of styles must be generated
      // see $const-grid-count in constants to define number of children

      & > #{class($item)} {
        @for $index from 1 through $const-grid-count {
          @include grid-item($width, $whitespace, $index, $trim-viewport-by);
        }
      }

      // size
      // create various sizes based on the list of provided keys
      // keys must be available in const-size-scale map

      @if(length($const-grid-size) != 0) {
        @each $key in $const-grid-size {
          &.size-#{$key} {

            // grid
            $this-width: $width * map-get($const-size-scale, $key);
            @include grid-container($this-width, $whitespace, $trim-viewport-by);

            // children
            & > #{class($item)} {
              @for $index from 1 through $const-grid-count {
                @include grid-item($this-width, $whitespace, $index, $trim-viewport-by);
              }
            }

          }
        }
      }

    }

  }

  // layout (evergreen)
  // modern W3C standard doesn't require column specification
  // auto-fill takes care of the layout automatically (awesome)

  #{class($container)} {

    // grid
    @include grid-container($width, $whitespace, $trim-viewport-by, auto-fill);

    // size
    // create various sizes based on the list of provided keys
    // keys must be available in const-size-scale map

    @if(length($const-grid-size) != 0) {
      @each $key in $const-grid-size {
        &.size-#{$key} {
          $this-width: $width * map-get($const-size-scale, $key);
          @include grid-container($this-width, $whitespace, $trim-viewport-by, auto-fill);
        }
      }
    }

  }

}
