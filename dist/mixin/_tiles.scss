/// Adds tiles layout to element. Includes legacy support, however the generated layout may not be identical to a modern W3C standard (because legacy syntax doesn't support automatic positioning). Note, enabled legacy support may generate large amount of code, can be disabled by setting **$const-tiles-legacy-enabled** to **false**.
/// @access public
/// @param {string} $item - Item selector (legacy)
/// @param {number} $width - Column width, in pixels
/// @param {number} $gap [0] - Gap between rows and columns, in pixels
/// @param {string} $repeat [auto-fill] - Recurring pattern for repeat function, see [**mdn**](https://developer.mozilla.org/en-US/docs/Web/CSS/repeat)

@mixin tiles($item, $width, $gap: 0, $repeat: auto-fill) {

  // layout
  display: grid;

  // Include legacy support only when $const-tiles-legacy-enabled is set to true
  // (false by default). This may (and probably will) generate large amount of
  // code, because legacy code needs to have specified position for each item
  // individually.

  @if($const-tiles-legacy-enabled) {

    // grid
    @include tiles-container($width, $gap);

    // Each tiles item must have defined position in the grid, so amount of
    // items must be known in order to generate appropriate amount of code.
    // Number of expected items is controlled by $const-tiles-legacy-count
    // constant.

    & > #{$item} {
      @for $index from 1 through $const-tiles-legacy-count {
        @include tiles-item($index, $width, $gap);
      }
    }

  }

  // Modern W3C standard, doesn't require column and item specification, because
  // it can automatically position items based on available width. The auto-fill
  // value takes care of the number of columns automatically.

  & {
    @include tiles-container($width, $gap, $repeat);
  }

  // content
  @content;

}
