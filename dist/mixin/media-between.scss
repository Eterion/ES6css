/// Wraps the content with a specified media query between **$lower** and **$upper** values. Use of [**media-up-from**](#mixin-media-up-from) mixin is highly preferred before any other media mixin (not a requirement). The **$operator** parameter determines relationship between width and height properties, only relevant when **$prop** is set to **both**. Media breakpoints are completely customizable through **$const-media-scale** constant.
/// @group media
/// @access public
/// @param {number|string} $lower - Scale or number
/// @param {number|string} $upper - Scale or number
/// @param {string} $prop [width] - Determines what value is returned, can be **width**, **height** or **both**
/// @param {string} $operator [and] - Determines relationship between width and height, can be **and** or **or**
/// @param {string} $direction [$const-media-direction] - Determines the direction for media query, can be **up** or **down**
/// @example @include media-between(phone, desktop) { ... }

@mixin media-between($lower, $upper, $prop: width, $operator: and, $direction: $const-media-direction) {

  // not found: lower
  @if (type-of($lower) == string and map-has-key($const-media-scale, $lower) == false) {
    @error err('key-not-found', $lower, '(media-between: lower)', map-keys($const-media-scale));
  }

  // not found: upper
  @if (type-of($upper) == string and map-has-key($const-media-scale, $upper) == false) {
    @error err('key-not-found', $upper, '(media-between: upper)', map-keys($const-media-scale));
  }

  // definition (and)
  @if ($operator == and) {
    @media #{media-query(min, $lower, $prop, $operator, $direction)} and #{media-query(max, $upper, $prop, $operator, $direction)} {
      @content;
    }
  }

  // definition (or)
  @else if($operator == or) {
    @media #{media-query(min, $lower, width, $operator, $direction)} and #{media-query(max, $upper, width, $operator, $direction)}, #{media-query(min, $lower, height, $operator, $direction)} and #{media-query(max, $upper, height, $operator, $direction)} {
      @content;
    }
  }

}
