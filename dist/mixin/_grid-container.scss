// Private mixins are intentionally left out of documentation.
// Adds grid layout to a container element. Includes legacy support, however the layout may not be identical to a modern W3C standard.
// @access private
// @param {number} $width - Column width, in pixels
// @param {number} $whitespace - Space between columns, in pixels
// @param {number} $trim-viewport-by [0] - Reduce available width considered into legacy calculation
// @param {number} $count [1] - Internal variable.

@mixin grid-container($width, $whitespace, $trim-viewport-by: 0, $count: 1) {

  // W3C standard
  @if(type-of($count) != 'number') {
    grid-template-columns: repeat($count, minmax(rem($width), 1fr));
  }

  // legacy
  // doesn't support W3C standard
  // number of columns must be therefore specified

  @else {

    // take into account minimum number of columns
    $count-restricted: if($count <= $const-grid-column-min, $const-grid-column-min, $count);
    grid-template-columns: repeat($count-restricted, minmax(rem($width), 1fr));

    // media
    // recalculates number of columns for each available width
    // media query is based on the item width

    @for $column-index from ($const-grid-column-min + 1) through $const-grid-column-max {
      @include media-up-from($column-index * ($width + $whitespace)) {

        // calculate number of columns
        $available: media($column-index * ($width + $whitespace)) - $trim-viewport-by;
        $add: if($available > ($width + $whitespace), floor($available / ($width + $whitespace)), 0);
        $count-restricted: if(($count + $add) <= $const-grid-column-min, $const-grid-column-min, ($count + $add));

        // legacy
        grid-template-columns: repeat($count-restricted, minmax(rem($width), 1fr));

      }
    }

  }

}
