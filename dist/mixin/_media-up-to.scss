/// Wraps the content with a specified media query from **scale** in downward
/// direction. Use of [media-up-from](#media-up-from) mixin is highly preferred
/// before any other media mixin (not a requirement). The **operator** parameter
/// determines relationship between width and height properties, only relevant
/// when **prop** is set to `both`. Media breakpoints are completely
/// customizable through [media-scale](#const-media-scale) constant.
/// @access public
/// @param {number|string} $scale - Number, or media-scale
/// @param {string} $prop [width] - Returned value (width, height, both)
/// @param {string} $operator [and] - Operator (and, or)
/// @param {string} $direction [$const-media-direction] - Direction (down, up)
/// @example @include media-up-to(phone) { ... }

@mixin media-up-to(
  $scale,
  $prop: width,
  $operator: and,
  $direction: $const-media-direction
) {
  // sort
  $const-media-scale: map-sort($const-media-scale, $const-media-sort);

  // not found
  @if (type-of($scale) == 'string') {
    @if (map-has-key($const-media-scale, $scale) == false) {
      @error err('key-not-found', $scale, '(media-up-to)', map-keys($const-media-scale));
    }
  }

  // definition
  @media #{media-query(max, $scale, $prop, $operator, $direction)} {
    @content;
  }
}
