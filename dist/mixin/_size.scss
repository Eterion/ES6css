/// Allows to use shorthand properties to represent width and height. Unitless values are handled as aspect ratio. Skip token **false** can be used to skip width or height property. This mixin already includes unit conversion, use non-relative units for input value, can be disabled by setting **$method** parameter to **false**. This mixin is alternative to [**postcss-short-size**](https://github.com/jonathantneal/postcss-short-size) plugin.
/// @access public
/// @param {number|list} $size - Size, or space separated list of width and height (set **false** to skip)
/// @param {bool|string} $method [rem] - Function called on the value, use **em** or **rem**
/// @example @include size(640px 4/3)

@mixin size($size, $method: rem) {

  // default
  $width: $size;
  $height: $size;

  // Detect whenever size property is provided as list of values (space
  // separated width and height). Unitless numbers are handled as aspect ratio,
  // that will calculate size relative to the other provided value. Cannot
  // accept two aspect ratios.

  @if(type-of($size) == 'list') {

    // properties
    $width: nth($size, 1);
    $height: nth($size, 2);

    // aspect ratio (relative to height)
    @if(type-of($width) == 'number' and unitless($width)) {

      // cannot be calculated
      @if(type-of($height) != 'number' or unitless($height)) {
        @error 'Height property (size) cannot be calculated, because width is skipped or defined as aspect ratio as well.';
      }

      // calculate
      $width: $width * $height;

    }

    // aspect ratio (relative to width)
    @if(type-of($height) == 'number' and unitless($height)) {

      // cannot be calculated
      @if(type-of($width) != 'number' or unitless($width)) {
        @error 'Width property (size) cannot be calculated, because height is skipped or defined as aspect ratio as well.';
      }

      // calculate
      $height: $width / $height;
    }

  }

  // width
  @if($width) {
    width: if($method, call($method, $width), $width);
  }

  // height
  @if($height) {
    height: if($method, call($method, $height), $height);
  }

}
