/// Wraps the content with a specified media query between **lower** and
/// **upper** values. Use of [media-up-from](#media-up-from) mixin is highly
/// preferred before any other media mixin (not a requirement). The **operator**
/// parameter determines relationship between width and height properties, only
/// relevant when **prop** is set to `both`. Media breakpoints are completely
/// customizable through [media-scale](#const-media-scale) constant.
/// @access public
/// @param {number|string} $lower - Number, or media-scale
/// @param {number|string} $upper - Number, or media-scale
/// @param {string} $prop [width] - Returned value (width, height, both)
/// @param {string} $operator [and] - Operator (and, or)
/// @param {string} $direction [$const-media-direction] - Direction (down, up)
/// @example @include media-between(phone, desktop) { ... }

@mixin media-between(
  $lower,
  $upper,
  $prop: width,
  $operator: and,
  $direction: $const-media-direction
) {
  // sort
  $const-media-scale: map-sort($const-media-scale, $const-media-sort);

  // not found: lower
  @if (type-of($lower) == 'string') {
    @if (map-has-key($const-media-scale, $lower) == false) {
      @error err('key-not-found', $lower, '(media-between: lower)', map-keys($const-media-scale));
    }
  }
  // not found: upper
  @if (type-of($upper) == 'string') {
    @if (map-has-key($const-media-scale, $upper) == false) {
      @error err('key-not-found', $upper, '(media-between: upper)', map-keys($const-media-scale));
    }
  }
  // definition
  @if ($prop == both and $operator == or) {
    @media (#{str-slice(media-query(min, $lower, width, and, $direction), 2, -2)}) and (#{str-slice(media-query(max, $upper, width, and, $direction), 2, -2)}), (#{str-slice(media-query(min, $lower, height, and, $direction), 2, -2)}) and (#{str-slice(media-query(max, $upper, height, and, $direction), 2, -2)}) {
      @content;
    }
  } @else {
    @media (#{str-slice(media-query(min, $lower, $prop, $operator, $direction), 2, -2)}) and (#{str-slice(media-query(max, $upper, $prop, $operator, $direction), 2, -2)}) {
      @content;
    }
  }
}
