/// Wraps the content with a specified media query between provided **$scale** and previous scale in map. Use of [**media-up-from**](#mixin-media-up-from) mixin is highly preferred before any other media mixin (not a requirement). The **$operator** parameter determines relationship between width and height properties, only relevant when **$prop** is set to **both**. Media breakpoints are completely customizable through **$const-media-scale** constant.
/// @group media
/// @access public
/// @param {string} $scale - Scale
/// @param {string} $prop [$const-default-media] - Determines what value is returned, can be **width**, **height** or **both**
/// @param {string} $operator [and] - Determines relationship between width and height, can be **and** or **or**
/// @example @include media-only(phone) { ... }

@mixin media-only($scale, $prop: $const-default-media, $operator: and) {

  // not key
  @if(type-of($scale) != string) {
    @error 'The media-only mixin does not accept direct pixel values.';
  }

  // not found
  @if(map-has-key($const-media-scale, $scale) == false) {
    @error err('key-not-found', $scale, '(media-only)', map-keys($const-media-scale));
  }

  // key index
  $index: index(map-keys($const-media-scale), $scale);

  // first
  @if($index == 1) {
    @media #{media-query(max, $scale, $prop, $operator)} {
      @content;
    }
  }

  // last
  @else if($index == length(map-keys($const-media-scale))) {
    $previous: nth(map-keys($const-media-scale), $index - 1);
    @media #{media-query(min, $previous, $prop, $operator)} {
      @content;
    }
  }

  // between
  @else {
    $previous: nth(map-keys($const-media-scale), $index - 1);
    @media #{media-query(min, $previous, $prop, $operator)} and #{media-query(max, $scale, $prop, $operator)} {
      @content;
    }
  }

}
