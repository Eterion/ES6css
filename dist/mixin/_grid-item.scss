// Private mixins are intentionally left out of documentation.
// Adds position to items inside grid container, needed only for legacy support.
// @access private
// @param {number} $width - Column width, in pixels
// @param {number|string} $whitespace - Space between columns, scale or number in pixels
// @param {number} $index - Index of item inside container
// @param {number} $reduce-viewport-by [0] - Reduce available width considered into legacy calculation
// @param {number|string} $repeat [$const-grid-column-min] - Repeat value, number for legacy mode

@mixin grid-item($width, $whitespace, $index, $reduce-viewport-by: 0, $repeat: $const-grid-column-min) {
  @if(type-of($repeat) == 'number') {
    &:nth-child(#{$index}) {

      // calculate real occupied width
      $real-width: $width + whitespace($whitespace, false);

      // calculate item position in grid
      $repeat-restricted: $repeat;
      -ms-grid-column: $index - ((ceil($index / $repeat-restricted) - 1) * $repeat-restricted);
      -ms-grid-row: ceil($index / $repeat-restricted);

      // media
      // number of columns is different based on available width
      // recalculates item position in grid in media query

      @for $column-index from ($const-grid-column-min + 1) through $const-grid-column-max {
        @include media-up-from($column-index * $real-width, width) {

          // calculate number of columns
          $available: media($column-index * $real-width, width) - $reduce-viewport-by;
          $add: if($available <= $column-index * $real-width, floor(($available - ($const-grid-column-min * $real-width)) / $real-width) , 0);
          $repeat-restricted: $const-grid-column-min + $add;

          // legacy
          -ms-grid-column: $index - ((ceil($index / $repeat-restricted) - 1) * $repeat-restricted);
          -ms-grid-row: ceil($index / $repeat-restricted);

        }
      }

    }
  }
}
