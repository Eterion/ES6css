/// Returns pixel value of [media-scale](#const-media-scale) according to
/// **value** property. Use of [media-between](#media-between),
/// [media-only](#media-only), [media-up-from](#media-up-from) and
/// [media-up-to](#media-up-to) mixins is highly recommended instead of using
/// custom new media rules through this function. Media breakpoints are
/// completely customizable through [media-scale](#const-media-scale) constant.
/// @access public
/// @param {number|string} $value - Number, or media-scale
/// @param {string} $prop [width] - Returned value (width, height, both)
/// @example media(desktop) // returns 1920px

@function media($value, $prop: width) {
  // sort
  $const-media-scale: map-sort($const-media-scale, $const-media-sort);

  // not a string
  @if (type-of($value) != 'string') {
    @return $value;
  }

  // not found
  @if (map-has-key($const-media-scale, $value) == false) {
    @error err('key-not-found', $value, '(media)', map-keys($const-media-scale));
  }

  // width, height
  $value: map-get($const-media-scale, $value);
  @if (type-of($value) == 'map') {
    @if (index((width, height), $prop)) {
      $value: map-get($value, $prop);
    }
  }

  @return $value;
}
