/// Returns a **$number** recalculated to em units, if possible. Allows scaling based on **$const-relative-units-root** constant. To ensure visibility of all elements, resulting numbers equal or below **$const-relative-units-min** are not recalculated. Requires **$const-relative-units** set to true. Use [**em-always**](#function-em-always) if you wish to convert to relative units, regardless of global settings.
/// @access public
/// @param {number} $number - Input number
/// @param {boolean|string} $unit [em] - Returned unit
/// @param {boolean} $ignore-const-relative-units [false] - Internal option, use [**em-always**](#function-em-always) or [**rem-always**](#function-rem-always) instead
/// @example em(16px) // returns 1em

@function em($number, $unit: em, $ignore-const-relative-units: false) {
  // unitless
  @if (type-of($number) == 'number' and unitless($number)) {
    @error "Number '#{$number}' in (em) has not unit, use a number with a defined unit.";
  }

  // conversion enabled
  @if (($const-relative-units or $ignore-const-relative-units) and $unit) {
    @if (type-of($number) == 'number') {
      // Constant unit conversion rates relative to pixels. This is used to
      // convert some units to pixels and then to em or rem. Values taken from
      // http://www.endmemo.com/sconvert/pixel.php

      $conversion-rates-of: (
        'cm': 0.02645833,
        'in': 0.01041667,
        'mm': 0.264583,
        'pc': 0.0625,
        'pt': 0.75,
      );

      // to pixels
      @if (not unitless($number)) {
        @if (map-has-key($conversion-rates-of, unit($number))) {
          $number: clear-unit($number) /
            map-get($conversion-rates-of, unit($number));
        }
      }

      // to relative units
      @if (unit($number) == 'px' or unitless($number)) {
        // is equal or below minimum
        $abs: abs(clear-unit($number));
        @if ($abs > 0 and $abs <= clear-unit($const-relative-units-min)) {
          @return #{round(clear-unit($number))}px;
        }

        // recalculate to relative units
        @return #{clear-unit($number) / clear-unit($const-relative-units-root)}#{$unit};
      }
    }
  }

  @return $number;
}
