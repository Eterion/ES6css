/// Returns scaled **$color** according to a **$scale** key. Allows easy color scaling without the need of additional variables for each new color variant. The source color can be passed as either direct color value or key identifier present in **$const-color-keys** constant. Scaling levels are completely customizable through **$const-color-scale** constant.
/// @access public
/// @param {color|string} $color - Input color or key
/// @param {bool|string} $scale [false] - Scale key
/// @example color(gray, dark) // returns #4f4f4f

@function color($value, $scale: false) {
  $color: $value;

  // in keys
  @if (map-has-key($const-color-keys, inspect($value))) {
    $color: map-get($const-color-keys, inspect($value));
  }

  // not a color
  @if (type-of($color) != 'color') {
    @error 'Color \"#{$color}\" is not a color, use valid color value or one of the following keys: #{map-keys($const-color-keys)}';
  }

  // scale
  @if ($scale) {
    @return scale-color(
      $color,
      $lightness: percentage(map-key-get($const-color-scale, $scale) / 100)
    );
  }

  @return $color;
}
