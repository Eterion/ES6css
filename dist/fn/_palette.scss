/// Computes color palette based on single color. The **hue-name** parameter
/// accepts any value from [color-hues](#const-color-hues) constant. Returned
/// value varies based on provided parameters, works in similar way to
/// [monochrome](#monochrome) function.
/// @access public
/// @param {color|string} $color - Color, or color-key
/// @param {boolean|string} $hue-name [false] - Hue name
/// @param {boolean|number} $index [false] - Index in the monochrome scale
/// @param {number} $tint [1] - Modifier of light colors
/// @param {number} $shade [1] - Modifier of dark colors
/// @param {list} $hues [$const-color-hues] - List of hue names
/// @param {number} $steps [$const-monochrome-steps] - Number of steps

@function palette(
  $color,
  $hue-name: false,
  $index: false,
  $tint: 1,
  $shade: 1,
  $hues: $const-color-hues,
  $steps: $const-monochrome-steps
) {
  $color: color($color);
  $palette: ();

  // Properties
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);

  // Desaturate
  @each $key, $value in ('black': 'black', 'gray': true) {
    $values: monochrome(
      $color,
      $index,
      $tint,
      $shade,
      $desaturate: $value,
      $steps
    );
    $palette: map-merge($palette, (#{$key}: $values));
  }

  // Hues
  @for $n from 1 through length($hues) {
    $base: hsl(
      ($n * (360 / length($hues)) + $hue) % 360,
      $saturation,
      $lightness
    );
    $values: monochrome(
      $base,
      $index,
      $tint,
      $shade,
      $desaturate: false,
      $steps
    );
    $palette: map-merge($palette, (#{hue-name($base)}: $values));
  }

  // Hue
  @if ($hue-name) {
    @return map-get($palette, inspect($hue-name));
  }

  @return $palette;
}
