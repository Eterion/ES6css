/// Returns a property value from imported module item. When used inside
/// [import](#import) mixin, parameters **name** and **group** are automatically
/// inferred.
/// @access public
/// @param {string} $prop - Property name
/// @param {boolean|string} $name [false] - Module name
/// @param {boolean|string} $group [$export-group] - Group key
/// @param {boolean} $css-custom-properties [false] - Enable var syntax
/// @param {map} $data [$system-import] - Source map
/// @example element { height: get(height); }

@function get(
  $prop,
  $name: false,
  $group: if(global-variable-exists(export-group), $export-group, false),
  $css-custom-properties: $const-custom-properties,
  $data: $system-import
) {
  // name and group is provided
  $id: map-get(compute-props($name, $group), id);
  @if (type-of($name) == 'string') {
    @if (map-has-key($system-export, $id) == false) {
      @error err('key-not-found', $id, '(get)', map-keys($system-export));
    }
    $data: map-get($system-export, $id);
  }

  // not found
  @if (map-has-key($data, $prop) == false) {
    @error err('key-not-found', $prop, '(get)', map-keys($data));
  }

  // custom properties
  @if ($css-custom-properties) {
    @if (index(($system-protected-properties), $prop) == null) {
      @if ($const-custom-properties-redirect-var) {
        @if (str-slice(quote(map-get($data, $prop)), 1, 3) == 'var') {
          @return map-get($data, $prop);
        }
      }
      @return if(
        $const-custom-properties-fallback,
        var(--#{map-get($data, name)}-#{$prop}, #{map-get($data, $prop)}),
        var(--#{map-get($data, name)}-#{$prop})
      );
    }
  }

  @return map-get($data, $prop);
}
