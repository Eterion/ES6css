// ----------
// System: private variables used internally by the function and mixin system.
// The content of these variables is rather dynamic during the build process.
// Primary purpose is to be temporary storage area or non-editable constant
// values.
// ----------

/// Storage variable used by [export](#export) mixin. Everytime an export item
/// is created, new map of properties is added to this system variable.
/// @access private
/// @type map

$system-export: ();

/// Storage variable used by [import](#import) mixin, needed for proper nesting
/// functionality. Stores list of property maps of currently exported item. This
/// variable is truncated outside of currently active import scope.
/// @access private
/// @type map

$system-data: ();

/// Storage variable used by [import](#import) mixin, stores only the last item
/// from currently avaiable data. This variable is truncated outside of
/// currently active import scope.
/// @access private
/// @type map

$system-import: ();

/// List of protected property names, that cannot be inserted as css custom
/// properties.
/// @access private
/// @type list

$system-protected-properties: 'name', 'selector', 'unique';

// ----------
// Constants: global variables used for settings.
// ----------

/// List of color names accross the entire color spectrum. This list of names is
/// directly used for [hue-name](#hue-name) and [palette](#palette) functions.
/// @access public
/// @type list

$const-color-hues: 'red', 'orange', 'yellow', 'lime', 'green', 'teal', 'cyan',
  'blue', 'indigo', 'violet', 'fuchsia', 'pink' !default;

/// Enables css custom properties, resulting in values to be rendered with
/// [var](https://developer.mozilla.org/en-US/docs/Web/CSS/var) syntax instead
/// of direct value. Use [css-custom-properties](#css-custom-properties) mixin
/// to generate `:root` selector.
/// @access public
/// @type boolean

$const-custom-properties: false !default;

/// Determines whenever to use [custom property fallback
/// values](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables#Custom_Property_fallback_values).
/// Requires [custom-properties](#const-custom-properties) set to `true`.
/// @access public
/// @type boolean

$const-custom-properties-fallback: false !default;

/// When set to `true`, module properties referencing to their values will be
/// redirected instead, effectivelly reducing total number of variables. This
/// will also clean up result of [css-custom-properties](#css-custom-properties)
/// mixin. Requires [custom-properties](#const-custom-properties) set to `true`.
/// @access public
/// @type boolean

$const-custom-properties-redirect-var: false !default;

/// Determines in what direction the generated media queries take priority. This
/// constants affects all media mixins (can be set individually via parameter)
/// and is dependent on [media-scale](#const-media-scale) map. When set to
/// `down`, higher media scale takes priority over lower ones, meaning `max`
/// value of lower scale is always one pixel lower than defined. The `up` option
/// is exact opposite of `down` behavior. This functionalitz can be completely
/// disabled by setting this constant to `false`. This also means the media
/// queries may overlap (depends on use) and mess up things on very specific
/// resolutions.
/// @access public
/// @type down | up | false

$const-media-direction: up !default;

/// Keys in [media-scale](#const-media-scale) constant are automatically sorted
/// by its values. However, if [media-scale](#const-media-scale) is set with
/// `width` and `height` keys, this constant is needed to determine by which key
/// the values should be sorted.
/// @access public
/// @type width | height

$const-media-sort: width !default;

/// Set number of [monochrome](#monochrome) color steps.
/// @access public
/// @type number

$const-monochrome-steps: 10 !default;

/// This constants affects only few map constants. When set to `true`, your
/// custom map configuration will be merged with defaults (your values take
/// priority over defaults). If you wish to completely replace default map
/// values with your own, set this constant to `false`.
/// @access public
/// @type boolean

$const-preserve-defaults: true !default;

/// When enabled, functions [em](#em), [rem](#rem) and other (all relevant
/// function have mentioned whenever relative units settings affects them) will
/// recalculate non-relative units to relative values (if possible). Resulting
/// value is calculated relative to
/// [relative-units-root](#const-relative-units-root) constant.
/// @access public
/// @type boolean

$const-relative-units: false !default;

/// Any value (in pixels) equal or below this constant will not be converted to
/// relative units. This applies to the [em-always](#em-always) and
/// [rem-always](#rem-always) functions as well. Requires
/// [relative-units](#const-relative-units) set to `true`.
/// @access public
/// @type number

$const-relative-units-min: 0 !default;

/// Base value (in pixels) for calculation of relative units.
/// @access public
/// @type number

$const-relative-units-root: 16px !default;

/// This template represents how the selector of imported module is created.
/// This is to allow customization of selectors generated by [import](#import)
/// mixin. The string value can contain placeholders for `{group}` (represents
/// **key** from [export-groups](#const-export-groups) map item), `{id}`
/// (represents **value** from [export-groups](#const-export-groups) map item)
/// and `{module}` (represents module name).
/// @access public
/// @type string

$const-template: '{module}' !default;

/// This template is active instead of [template](#const-template) constant,
/// when [export-groups](#const-export-groups) are used. Placeholders are also
/// identical.
/// @access public
/// @type string

$const-template-group: '{id}-{module}' !default;

/// List of group names for export modules, where key represents group name
/// ([template](#const-template) replacement of `{group}` placeholder), and
/// value represents much shorter identifier ([template](#const-template)
/// replacement of `{id}` placeholder).
/// @access public
/// @type map

$const-export-groups: () !default;

// ----------
// Maps: map constants require one additional constant to keep original values
// intact. This is needed for the $const-preserve-default functionality. The
// default maps end with `system` suffix, which is then merged to properly named
// map constant at the end of this file.
// ----------

/// List of keyword and its color values. This is where you want to define your
/// colors. The keyword for a color can be pretty much anything, including a
/// valid color value (for example `gray`), the [color](#color) function takes
/// care of everything and will always check for color keys before using the
/// actual color.
/// @access public
/// @name const-color-keys
/// @type map

$const-color-keys-system: (
  'gray': dimgray,
  'accent': blue,
  'success': green,
  'warn': yellow,
  'err': red,
) !default;

/// List of scale keys for the [color](#color) function used as second argument.
/// The nummber (positive or negative value) represents percentage of lightness
/// relative to the original source color. Internally uses native
/// [color-scale](http://sass-lang.com/documentation/Sass/Script/Functions.html#scale_color-instance_method)
/// method.
/// @access public
/// @name const-color-scale
/// @type map

$const-color-scale-system: (
  'dark': -50,
  'regular': 0,
  'light': 50,
) !default;

/// List of available keys for the [font-weight](#font-weight) function. Note,
/// this function duplicates the
/// [postcss-font-weight](https://github.com/jonathantneal/postcss-font-weights)
/// plugin. If you're using this plugin, there's no need to use this function as
/// well, use the keyword values directly instead.
/// @access public
/// @name const-font-weight-scale
/// @type map

$const-font-weight-scale-system: (
  'thin': 100,
  'extralight': 200,
  'ultralight': 200,
  'light': 300,
  'book': 400,
  'normal': 400,
  'regular': 400,
  'roman': 400,
  'medium': 500,
  'semibold': 600,
  'demibold': 600,
  'bold': 700,
  'extrabold': 800,
  'ultrabold': 800,
  'black': 900,
  'heavy': 900,
) !default;

/// List of media breakpoints. The values can be defined either directly as
/// values or as map of width and height properties. However, if defined as
/// direct values, some of the media functionality will not be available.
/// @access public
/// @name const-media-scale
/// @type map

$const-media-scale-system: (
  'phone': (
    'width': 480px,
    'height': 853px,
  ),
  'desktop': (
    'width': 1920px,
    'height': 1080px,
  ),
) !default;

// ----------
// Maps (non-defaults): similar to maps in section above, however these maps are
// not affected by the $const-preserve-defaults constant, while the default map
// values are still needed.
// ----------

/// Properties in this map are automatically added to every module. Properties
/// added via [export](#export) or [extend](#extend) mixins take priority over
/// defaults.
/// @access public
/// @name const-export-defaults
/// @type map

$const-export-defaults-system: (
  'unique': false,
) !default;

// ----------
// Preserve Defaults: merge specific maps with new potential settings. This is
// needed to allow $const-preserve-defaults functionality.
// ----------

// color-keys
$const-color-keys: map-merge(
  if($const-preserve-defaults, $const-color-keys-system, ()),
  if(
    global-variable-exists(const-color-keys),
    $const-color-keys,
    $const-color-keys-system
  )
);

// color-scale
$const-color-scale: map-merge(
  if($const-preserve-defaults, $const-color-scale-system, ()),
  if(
    global-variable-exists(const-color-scale),
    $const-color-scale,
    $const-color-scale-system
  )
);

// font-weight-scale
$const-font-weight-scale: map-merge(
  if($const-preserve-defaults, $const-font-weight-scale-system, ()),
  if(
    global-variable-exists(const-font-weight-scale),
    $const-font-weight-scale,
    $const-font-weight-scale-system
  )
);

// media-scale
$const-media-scale: map-merge(
  if($const-preserve-defaults, $const-media-scale-system, ()),
  if(
    global-variable-exists(const-media-scale),
    $const-media-scale,
    $const-media-scale-system
  )
);

// ----------
// Merge: default values are simply merged with user defined.
// ----------

// export-defaults
$const-export-defaults: map-merge(
  $const-export-defaults-system,
  if(global-variable-exists(const-export-defaults), $const-export-defaults, ())
);

// System
@import 'system/compute-props';
@import 'system/err';
@import 'system/map-key-get';
@import 'system/media-query';

// Functions
@import 'fn/clear-unit';
@import 'fn/color';
@import 'fn/em';
@import 'fn/em-always';
@import 'fn/font-weight';
@import 'fn/get';
@import 'fn/hue-name';
@import 'fn/insert-nth';
@import 'fn/interpolate';
@import 'fn/map-deep-get';
@import 'fn/map-filter';
@import 'fn/map-sort';
@import 'fn/media';
@import 'fn/monochrome';
@import 'fn/palette';
@import 'fn/rem';
@import 'fn/rem-always';
@import 'fn/spectrum';
@import 'fn/str-replace';
@import 'fn/to-class';
@import 'fn/to-id';
@import 'fn/to-unicode';

// Mixins
@import 'mixin/css-custom-properties';
@import 'mixin/export';
@import 'mixin/extend';
@import 'mixin/has-class';
@import 'mixin/import';
@import 'mixin/media-between';
@import 'mixin/media-only';
@import 'mixin/media-up-from';
@import 'mixin/media-up-to';
@import 'mixin/props';
@import 'mixin/size';
@import 'mixin/transition';
