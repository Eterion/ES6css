/// Returns a **$number** recalculated to em units, if possible. It's recommended to use this function and its [**rem**](#function-rem) counterpart on every non-relative value, to allow scaling based on **const-default-key** key of the **const-font-size-scale** constant. To ensure visibility of all elements, resulting numbers equal or below **$const-relative-units-min** are not recalculated. By default, this function returns its original input number, unless enabled by setting **$const-relative-units-enabled** to **true**. Use [**em-always**](#function-em-always) if you wish to convert to relative units, regardless of global settings.
/// @access public
/// @param {number} $number - Source number
/// @param {boolean|string} $unit [em] - Returned unit
/// @param {boolean} $ignore-const-relative-units-enabled [false] - Internal option, use [**em-always**](#function-em-always) or [**rem-always**](#function-rem-always) instead
/// @example em(14px) // returns 1em

@function em($number, $unit: em, $ignore-const-relative-units-enabled: false) {

  // unitless
  @if(type-of($number) == number and unitless($number)) {
    @error 'Number \"#{$number}\" is unitless, use a number with a defined unit.';
  }

  // conversion
  @if(($const-relative-units-enabled or $ignore-const-relative-units-enabled) and $unit) {
    @if(type-of($number) == 'number') {

      // rates relative to pixels
      // unit conversion reates taken from
      // http://www.endmemo.com/sconvert/pixel.php

      $conversion-rates-of: (
        'cm': 0.02645833,
        'in': 0.01041667,
        'mm': 0.264583,
        'pc': 0.0625,
        'pt': 0.75,
      );

      // to pixels
      @if(not unitless($number)) {
        @if(map-has-key($conversion-rates-of, unit($number))) {
          $number: clear-unit($number) / map-get($conversion-rates-of, unit($number));
        }
      }

      // to relative units
      @if(unit($number) == 'px' or unitless($number)) {

        // is equal or below minimum
        @if(abs(clear-unit($number)) > 0 and abs(clear-unit($number)) <= clear-unit($const-relative-units-min)) {
          @return #{round(clear-unit($number))}px;
        }

        // recalculate to relative
        @return #{clear-unit($number) / clear-unit(map-get($const-font-size-scale, $const-default-key))}#{$unit};

      }

    }
  }

  // return
  @return $number;

}
